---
import { Icon } from 'astro-icon/components';

interface Props {
  images: { src: string; alt: string }[];
  id?: string;
  autoplay?: boolean;
  interval?: number;
  showNavigation?: boolean;
  showPagination?: boolean;
}

// Obtener id de Astro.props antes de usarlo
const { images, id, autoplay = true, interval = 3000, showNavigation = true, showPagination = false } = Astro.props;
const uniqueId = id ?? `carousel-${Math.random().toString(36).slice(2, 10)}`;
---

<div
  id={uniqueId}
  class="service-carousel-container relative flex flex-col items-center border border-slate-200/50 backdrop-blur-sm rounded-3xl shadow-2xl max-w-xs w-full mx-auto group p-0 bg-gradient-to-br from-slate-50 via-white to-blue-50"
  data-autoplay={autoplay}
  data-interval={interval}
  data-images-length={images.length}
>
  {/* Viewport sin padding, solo overflow-hidden y border-radius */}
  <div class="carousel-viewport w-full overflow-hidden rounded-3xl bg-gradient-to-br from-slate-100 via-white to-blue-100 flex items-center justify-center aspect-[16/9] min-h-[220px] max-h-[420px]" style="border: 2px solid #e0e7ef; box-shadow: 0 8px 32px 0 rgba(31,38,135,0.10);">
    <div class="carousel-inner relative h-full w-full">
      {images.map((image, index) => (
        <div class="carousel-item absolute top-0 left-0 w-full h-full transition-opacity duration-500 ease-in-out opacity-0" data-index={index}>
          <img 
            src={image.src} 
            alt={image.alt} 
            class="w-full h-full object-cover"
          />
        </div>
      ))}
    </div>
    {/* Flechas solo visibles al hover en desktop */}
    {showNavigation && (
      <>
        <button
          class="carousel-control-prev opacity-0 group-hover:opacity-100 transition-opacity duration-300 absolute left-2 top-1/2 -translate-y-1/2 bg-white/90 text-blue-600 border border-slate-200 shadow-lg hover:bg-blue-100 hover:text-blue-800 rounded-full p-2 w-10 h-10 flex items-center justify-center z-20 focus:outline-none focus:ring-2 focus:ring-blue-400/50 js-carousel-arrow"
          data-carousel-prev
          aria-label="Anterior"
        >
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" /></svg>
        </button>
        <button
          class="carousel-control-next opacity-0 group-hover:opacity-100 transition-opacity duration-300 absolute right-2 top-1/2 -translate-y-1/2 bg-white/90 text-blue-600 border border-slate-200 shadow-lg hover:bg-blue-100 hover:text-blue-800 rounded-full p-2 w-10 h-10 flex items-center justify-center z-20 focus:outline-none focus:ring-2 focus:ring-blue-400/50 js-carousel-arrow"
          data-carousel-next
          aria-label="Siguiente"
        >
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" /></svg>
        </button>
      </>
    )}
  </div>
  {/* Miniaturas mejoradas y funcionales */}
  <div class="flex justify-center overflow-x-auto scrollbar-hide w-full px-4 mt-4">
    <div class="flex space-x-3 sm:space-x-4 md:space-x-5 max-w-full justify-center">
      {images.map((image, index) => (
        <button
          class="thumbnail-btn relative border-2 rounded-xl overflow-hidden focus:outline-none flex-shrink-0 transition-all duration-300 bg-white shadow-lg hover:shadow-xl hover:scale-110 group/thumb"
          data-carousel-thumbnail={index}
          style={`border-color: var(--thumbnail-active-color, transparent);`}
        >
          <img 
            src={image.src} 
            alt={image.alt} 
            class="w-12 h-12 sm:w-14 sm:h-14 md:w-16 md:h-16 lg:w-18 lg:h-18 object-cover transition-transform duration-300 group-hover/thumb:scale-110 bg-white rounded-xl" 
            style="aspect-ratio: 16/9;"
          />
        </button>
      ))}
    </div>
  </div>
  <div class="text-center mt-2">
    <div class="inline-flex items-center bg-white/80 backdrop-blur-sm px-4 py-2 rounded-full shadow-lg border border-slate-200/50">
      <span class="text-sm sm:text-base text-slate-700 font-semibold">
        <span class="carousel-counter-current text-blue-600">1</span> 
        <span class="text-slate-500 mx-1">de</span> 
        <span class="carousel-counter-total">{images.length}</span>
      </span>
    </div>
  </div>
</div>

<script is:inline>
  document.addEventListener('astro:page-load', () => {
    const carousels = document.querySelectorAll('.service-carousel-container');
    carousels.forEach(initCarousel);
  });

  function initCarousel(container) {
    const items = Array.from(container.querySelectorAll('.carousel-item'));
    const thumbnails = Array.from(container.querySelectorAll('.thumbnail-btn'));
    const prevBtn = container.querySelector('[data-carousel-prev]');
    const nextBtn = container.querySelector('[data-carousel-next]');
    const counterCurrent = container.querySelector('.carousel-counter-current');
    const counterTotal = container.querySelector('.carousel-counter-total');

    if (items.length <= 1) return;

    let currentIndex = 0;
    let isTransitioning = false;
    let autoplayInterval;

    const options = {
      autoplay: container.dataset.autoplay === 'true',
      interval: 5000, // Velocidad más lenta
    };

    function updateCarousel(newIndex) {
      if (isTransitioning || newIndex === currentIndex) return;
      isTransitioning = true;

      const oldIndex = currentIndex;
      currentIndex = (newIndex + items.length) % items.length;

      items[oldIndex].classList.remove('active');
      items[currentIndex].classList.add('active');

      setTimeout(() => {
        isTransitioning = false;
      }, 500); // Duración de la transición CSS

      thumbnails.forEach((thumb, index) => {
        thumb.classList.toggle('active', index === currentIndex);
      });

      if (counterCurrent) {
        counterCurrent.textContent = currentIndex + 1;
      }
    }

    function next() {
      updateCarousel(currentIndex + 1);
    }

    function prev() {
      updateCarousel(currentIndex - 1);
    }

    function startAutoplay() {
      if (!options.autoplay) return;
      stopAutoplay();
      autoplayInterval = setInterval(next, options.interval);
    }

    function stopAutoplay() {
      clearInterval(autoplayInterval);
    }

    prevBtn.addEventListener('click', () => {
      prev();
      startAutoplay();
    });

    nextBtn.addEventListener('click', () => {
      next();
      startAutoplay();
    });

    thumbnails.forEach((thumb, index) => {
      thumb.addEventListener('click', () => {
        updateCarousel(index);
        startAutoplay();
      });
    });

    container.addEventListener('mouseenter', stopAutoplay);
    container.addEventListener('mouseleave', startAutoplay);

    if (counterTotal) {
      counterTotal.textContent = items.length;
    }

    // Initial setup
    items[0].classList.add('active');
    thumbnails[0].classList.add('active');
    startAutoplay();
  }
</script>

<style>
  .carousel-viewport {
    width: 100%;
    overflow: hidden;
    position: relative;
    background: transparent;
  }
  .carousel-item.active {
    opacity: 1;
  }
  .carousel-control-prev,
  .carousel-control-next {
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s;
  }
  .group:hover .carousel-control-prev,
  .group:hover .carousel-control-next {
    opacity: 1;
    pointer-events: auto;
  }
  @media (max-width: 768px) {
    .carousel-control-prev,
    .carousel-control-next {
      opacity: 1;
      pointer-events: auto;
    }
  }
  .thumbnail-btn {
    border: 2px solid transparent;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .thumbnail-btn.active {
    border-color: #2563eb;
    box-shadow: 0 0 0 4px rgba(37, 99, 235, 0.2);
    transform: scale(1.1);
  }
  
  .carousel-indicator.active {
    background-color: #2563eb;
    border-color: #2563eb;
    transform: scale(1.3);
    box-shadow: 0 0 10px rgba(37, 99, 235, 0.5);
  }
  
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
  
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  
  /* Efectos de hover mejorados */
  .carousel-item img:hover {
    transform: scale(1.05);
  }
  
  /* Animación de entrada para el carrusel */
  @keyframes carouselFadeIn {
    from {
      opacity: 0;
      transform: translateY(30px) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }
  
  .group {
    animation: carouselFadeIn 0.8s ease-out;
  }
  
  /* Efecto de brillo en las flechas */
  .carousel-control-prev:hover,
  .carousel-control-next:hover {
    box-shadow: 0 0 25px rgba(37, 99, 235, 0.4);
  }
  
  /* Responsive para pantallas muy pequeñas */
  @media (max-width: 480px) {
    .carousel-control-prev,
    .carousel-control-next {
      padding: 0.75rem;
    }
  }
  
  /* Mejoras para pantallas grandes */
  @media (min-width: 1024px) {
    .group {
      max-width: 90vw;
    }
  }
  
  /* Efecto de profundidad en las imágenes */
  .carousel-item img {
    filter: drop-shadow(0 10px 20px rgba(0, 0, 0, 0.1));
  }
</style>

 